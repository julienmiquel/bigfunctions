type: function_py
category: transform_string
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://media-exp1.licdn.com/dms/image/C4E03AQF92ENRMYC3Mw/profile-displayphoto-shrink_800_800/0/1656924490995?e=1675900800&v=beta&t=Ertn0DSUvqzexmymI6NDba3TrXaSLRM_cQ5dxjmTkzo"
description: Compute sentiment score of text
arguments:
  - name: content
    type: string
output:
  name: sentiment_score
  type: float64
examples:
  - description: ""
    arguments:
      - "'BigFunctions Rocks!'"
    output: "0.945"
    region: ALL
code: |
  if not content:
    return None 

  import google.cloud.language_v1 as language
  from html.parser import HTMLParser
  from io import StringIO

  language_client = language.LanguageServiceClient()

  class MLStripper(HTMLParser):
      def __init__(self):
          super().__init__()
          self.reset()
          self.fed = []

      def handle_data(self, d):
          self.fed.append(d)
      def get_data(self):
          return ' '.join(self.fed).replace("\n","").replace("-",".").replace("  ", " ").replace(" .", ".")

  def strip_tags(html):
      s = MLStripper()
      s.feed(html)
      return s.get_data()

  content = strip_tags(content)

  document = language.Document(content=content, type_=language.Document.Type.PLAIN_TEXT)
  request = language.AnalyzeSentimentRequest(document=document)
  sentiment = language_client.analyze_sentiment(request=request).document_sentiment
  return sentiment.score
requirements: |
  google-cloud-language
